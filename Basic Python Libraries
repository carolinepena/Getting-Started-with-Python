{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "57d579e3",
   "metadata": {
    "papermill": {
     "duration": 0.006125,
     "end_time": "2025-08-27T14:21:19.464552",
     "exception": false,
     "start_time": "2025-08-27T14:21:19.458427",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Getting Started with Basic Python Libraries"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "727fad03",
   "metadata": {
    "papermill": {
     "duration": 0.005038,
     "end_time": "2025-08-27T14:21:19.475048",
     "exception": false,
     "start_time": "2025-08-27T14:21:19.470010",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Purpose\n",
    "\n",
    "Provide a basic introduction to Python's basic libraries, such as numpy, pandas, matplotlib, and seaborn, highlighting their key functions and use to python applications.\n",
    "\n",
    "---\n",
    "\n",
    "### Content\n",
    "\n",
    "1. Numpy Library\n",
    "2. Pandas Library\n",
    "3. Matplotlib Library\n",
    "4. Seaborn Library"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "449fbaa4",
   "metadata": {
    "papermill": {
     "duration": 0.00513,
     "end_time": "2025-08-27T14:21:19.485564",
     "exception": false,
     "start_time": "2025-08-27T14:21:19.480434",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Numpy Library\n",
    "\n",
    "**NumPy**, short for *Numerical Python*, is a powerful and foundation library for scientific computing and numerical analysis in Python. It provides efficient data structures alongside highly optimized mathematical functions design to operate on these data strucutures. \n",
    "\n",
    "It was designed to efficiently hangle large volumes of data, serving as a foundation for many advanced libraries suc as **Pandas**, **scikit-learn** and others.\n",
    "\n",
    "---\n",
    "\n",
    "## Import NumPy Library\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "921ceb75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:19.497240Z",
     "iopub.status.busy": "2025-08-27T14:21:19.496877Z",
     "iopub.status.idle": "2025-08-27T14:21:19.505341Z",
     "shell.execute_reply": "2025-08-27T14:21:19.504145Z"
    },
    "papermill": {
     "duration": 0.017122,
     "end_time": "2025-08-27T14:21:19.507782",
     "exception": false,
     "start_time": "2025-08-27T14:21:19.490660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dff655d",
   "metadata": {
    "papermill": {
     "duration": 0.007841,
     "end_time": "2025-08-27T14:21:19.522777",
     "exception": false,
     "start_time": "2025-08-27T14:21:19.514936",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## NumPy Features\n",
    "\n",
    "\n",
    "\n",
    "1. **Linear Algebra**\n",
    "\n",
    "    *NumPy's Linear Algebra tools* make it easy to work with matrices, supporting operations like multiplication, determinant calculation, and matrix inversion. You can also solve equations and understand key matrix properties like eigenvalues.\n",
    "   \n",
    "2. **Statistic**\n",
    "\n",
    "    *NumPy's Statistics tools* simplify data analysis by providing functions to calculate common metrics, including mean, median, variance, and standard deviation. These functions help developers summarize and understand datasets quickly, making NumPy highly useful for data analysis and learning statistics.\n",
    "\n",
    "3. **Data Manipulation**\n",
    "\n",
    "    *NumPy's Data Manipulation tools* allow developers to effortlessly reshape arrays, combine or split data, and access specific parts of arrays using indexing and slicing. These features make organizing and adjusting large datasets straightforward and efficient.\n",
    "\n",
    "4. **N-dimensional Arrays** \n",
    "\n",
    "    *NumPy's N-dimensional Arrays* are versatile tools for storing and working with data in multiple dimensions, such as lists or tables. They are fast, easy to use, and optimized for mathematical operations, making them ideal for exploring structured data and performing calculations.\n",
    "\n",
    "5. **Arrays**\n",
    "\n",
    "   *NumPy's Mathematical Operations* enable developers to carry out calculations like addition, multiplication, and more directly on arrays without needing loops. This approach is fast, efficient, and simplifies handling large datasets in Python.\n",
    "\n",
    "---\n",
    "\n",
    "## Exploring NumPy Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a74da3e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:19.536667Z",
     "iopub.status.busy": "2025-08-27T14:21:19.536280Z",
     "iopub.status.idle": "2025-08-27T14:21:19.543209Z",
     "shell.execute_reply": "2025-08-27T14:21:19.542227Z"
    },
    "papermill": {
     "duration": 0.015822,
     "end_time": "2025-08-27T14:21:19.545069",
     "exception": false,
     "start_time": "2025-08-27T14:21:19.529247",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Creating a list using native modules of the Python Standard Library\n",
    "import random\n",
    "\n",
    "salary_list = [random.randint(5000, 10000) for _ in range(1_000)] # Create a list of 1.000 salaries ranging from 5.000 to 10.000 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "13be3b61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:19.559876Z",
     "iopub.status.busy": "2025-08-27T14:21:19.558649Z",
     "iopub.status.idle": "2025-08-27T14:21:19.858166Z",
     "shell.execute_reply": "2025-08-27T14:21:19.856999Z"
    },
    "papermill": {
     "duration": 0.309474,
     "end_time": "2025-08-27T14:21:19.859839",
     "exception": false,
     "start_time": "2025-08-27T14:21:19.550365",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Avereage Salary (Statistics): 7498.512 - Execution Time:  0.22s\n",
      "Avereage Salary (NumPy): 7498.512 - Execution Time:  0.07s\n"
     ]
    }
   ],
   "source": [
    "# Comparing the execution time for calculating the average salaries using the statistics module and the mean function from the NumPy library\n",
    "import statistics\n",
    "from timeit import timeit\n",
    "\n",
    "time_statistics = timeit(lambda: statistics.mean(salary_list), number = 1000)\n",
    "print(f\"Avereage Salary (Statistics): {statistics.mean(salary_list)} - Execution Time: {time_statistics: .2f}s\") \n",
    "\n",
    "time_mean = timeit(lambda: np.mean(salary_list), number = 1000)\n",
    "print(f\"Avereage Salary (NumPy): {np.mean(salary_list)} - Execution Time: {time_mean: .2f}s\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "855ea7d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:19.872338Z",
     "iopub.status.busy": "2025-08-27T14:21:19.871955Z",
     "iopub.status.idle": "2025-08-27T14:21:19.879429Z",
     "shell.execute_reply": "2025-08-27T14:21:19.878466Z"
    },
    "papermill": {
     "duration": 0.015539,
     "end_time": "2025-08-27T14:21:19.880861",
     "exception": false,
     "start_time": "2025-08-27T14:21:19.865322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total salaries: [ 63000.  88000.  81000. 100800.  45000.]\n",
      "Average salary: $75560.00\n"
     ]
    }
   ],
   "source": [
    "# One more example of numpy features\n",
    "job_titles = np.array(['Data Analyst', 'Data Scientist', 'Data Engineer', 'Machine Learning Engineer', 'AI Engineer']) # Creating an array with Job Titles\n",
    "base_salaries = np.array([60000, 80000, 75000, 90000, 45000]) # Creating an array with Base Salaries\n",
    "bonus_rates = np.array([.05, .1, .08, .12, 0]) # Creating an array with Bonus Rates\n",
    "\n",
    "total_salaries = base_salaries * (1 + bonus_rates) # Calculating the salaries according to the bonus rates\n",
    "print(\"Total salaries:\", total_salaries)\n",
    "\n",
    "average_salary = np.mean(total_salaries) # Calculating the average salary\n",
    "print(f\"Average salary: ${average_salary:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8b6dae5",
   "metadata": {
    "papermill": {
     "duration": 0.005008,
     "end_time": "2025-08-27T14:21:19.891843",
     "exception": false,
     "start_time": "2025-08-27T14:21:19.886835",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Pandas Library\n",
    "\n",
    "**Pandas**, short for *Python Data Analysis*, is a powerful and flexible library for data manipulation and analysis. It provides high-performance, easy-to-use data structures like **Series** and **DataFrames**, enabling effective handling, organization, and analysis of structured datasets. \n",
    "\n",
    "Pandas is widely used for tasks involving data cleaning, transformation, and visualization, making it essential for anyone working in data science or related fields.\n",
    "\n",
    "---\n",
    "\n",
    "## Import Pandas Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "02d2adc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:19.903796Z",
     "iopub.status.busy": "2025-08-27T14:21:19.903450Z",
     "iopub.status.idle": "2025-08-27T14:21:21.938653Z",
     "shell.execute_reply": "2025-08-27T14:21:21.937458Z"
    },
    "papermill": {
     "duration": 2.043511,
     "end_time": "2025-08-27T14:21:21.940618",
     "exception": false,
     "start_time": "2025-08-27T14:21:19.897107",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30ed032e",
   "metadata": {
    "papermill": {
     "duration": 0.005125,
     "end_time": "2025-08-27T14:21:21.951799",
     "exception": false,
     "start_time": "2025-08-27T14:21:21.946674",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Pandas Features\n",
    "\n",
    "1. **DataFrames**\n",
    "\n",
    "    *Pandas DataFrames* are two-dimensional, tabular data structures (similar to Excel spreadsheets or SQL tables). DataFrames allow developers to store and manipulate labeled data efficiently.\n",
    "   \n",
    "2. **Series**\n",
    "\n",
    "    *Pandas Series* are one-dimensional data structures akin to a column in a DataFrame. It supports array-like operations and can store heterogeneous data types.\n",
    "\n",
    "3. **Data Manipulation**\n",
    "\n",
    "    *Pandas Data Manipulation* simplify transforming and reshaping data. You can filter rows, slice columns, merge datasets, and handle missing values with ease, making it ideal for cleaning and preparing datasets.\n",
    "\n",
    "4. **Data Cleaning** \n",
    "\n",
    "    *Pandas Data Cleaning* are designed to handle incomplete or noisy datasets. With functions for filling missing values, dropping duplicates, and handling null values, Pandas helps to ensure data quality and consistency.\n",
    "\n",
    "5. **Pandas Aggregation and Grouping**\n",
    "\n",
    "   *Pandas Aggregation and Grouping* enable summarizing large datasets by grouping rows or columns based on specific criteria. You can calculate metrics like sum, mean, or count, making it easier to analyze trends and patterns.\n",
    "\n",
    "---\n",
    "\n",
    "## Exploring Pandas Features\n",
    "\n",
    "### Inspection DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e94ca699",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:21.964159Z",
     "iopub.status.busy": "2025-08-27T14:21:21.963735Z",
     "iopub.status.idle": "2025-08-27T14:21:22.121277Z",
     "shell.execute_reply": "2025-08-27T14:21:22.120115Z"
    },
    "papermill": {
     "duration": 0.166028,
     "end_time": "2025-08-27T14:21:22.123169",
     "exception": false,
     "start_time": "2025-08-27T14:21:21.957141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Show_Id</th>\n",
       "      <th>Category</th>\n",
       "      <th>Title</th>\n",
       "      <th>Director</th>\n",
       "      <th>Cast</th>\n",
       "      <th>Country</th>\n",
       "      <th>Release_Date</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Type</th>\n",
       "      <th>Description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>s1</td>\n",
       "      <td>TV Show</td>\n",
       "      <td>3%</td>\n",
       "      <td>NaN</td>\n",
       "      <td>João Miguel, Bianca Comparato, Michel Gomes, R...</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>August 14, 2020</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>4 Seasons</td>\n",
       "      <td>International TV Shows, TV Dramas, TV Sci-Fi &amp;...</td>\n",
       "      <td>In a future where the elite inhabit an island ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>s2</td>\n",
       "      <td>Movie</td>\n",
       "      <td>07:19</td>\n",
       "      <td>Jorge Michel Grau</td>\n",
       "      <td>Demián Bichir, Héctor Bonilla, Oscar Serrano, ...</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>December 23, 2016</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>93 min</td>\n",
       "      <td>Dramas, International Movies</td>\n",
       "      <td>After a devastating earthquake hits Mexico Cit...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>s3</td>\n",
       "      <td>Movie</td>\n",
       "      <td>23:59</td>\n",
       "      <td>Gilbert Chan</td>\n",
       "      <td>Tedd Chan, Stella Chung, Henley Hii, Lawrence ...</td>\n",
       "      <td>Singapore</td>\n",
       "      <td>December 20, 2018</td>\n",
       "      <td>R</td>\n",
       "      <td>78 min</td>\n",
       "      <td>Horror Movies, International Movies</td>\n",
       "      <td>When an army recruit is found dead, his fellow...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>s4</td>\n",
       "      <td>Movie</td>\n",
       "      <td>9</td>\n",
       "      <td>Shane Acker</td>\n",
       "      <td>Elijah Wood, John C. Reilly, Jennifer Connelly...</td>\n",
       "      <td>United States</td>\n",
       "      <td>November 16, 2017</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>80 min</td>\n",
       "      <td>Action &amp; Adventure, Independent Movies, Sci-Fi...</td>\n",
       "      <td>In a postapocalyptic world, rag-doll robots hi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>s5</td>\n",
       "      <td>Movie</td>\n",
       "      <td>21</td>\n",
       "      <td>Robert Luketic</td>\n",
       "      <td>Jim Sturgess, Kevin Spacey, Kate Bosworth, Aar...</td>\n",
       "      <td>United States</td>\n",
       "      <td>January 1, 2020</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>123 min</td>\n",
       "      <td>Dramas</td>\n",
       "      <td>A brilliant group of students become card-coun...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Show_Id Category  Title           Director  \\\n",
       "0      s1  TV Show     3%                NaN   \n",
       "1      s2    Movie  07:19  Jorge Michel Grau   \n",
       "2      s3    Movie  23:59       Gilbert Chan   \n",
       "3      s4    Movie      9        Shane Acker   \n",
       "4      s5    Movie     21     Robert Luketic   \n",
       "\n",
       "                                                Cast        Country  \\\n",
       "0  João Miguel, Bianca Comparato, Michel Gomes, R...         Brazil   \n",
       "1  Demián Bichir, Héctor Bonilla, Oscar Serrano, ...         Mexico   \n",
       "2  Tedd Chan, Stella Chung, Henley Hii, Lawrence ...      Singapore   \n",
       "3  Elijah Wood, John C. Reilly, Jennifer Connelly...  United States   \n",
       "4  Jim Sturgess, Kevin Spacey, Kate Bosworth, Aar...  United States   \n",
       "\n",
       "        Release_Date Rating   Duration  \\\n",
       "0    August 14, 2020  TV-MA  4 Seasons   \n",
       "1  December 23, 2016  TV-MA     93 min   \n",
       "2  December 20, 2018      R     78 min   \n",
       "3  November 16, 2017  PG-13     80 min   \n",
       "4    January 1, 2020  PG-13    123 min   \n",
       "\n",
       "                                                Type  \\\n",
       "0  International TV Shows, TV Dramas, TV Sci-Fi &...   \n",
       "1                       Dramas, International Movies   \n",
       "2                Horror Movies, International Movies   \n",
       "3  Action & Adventure, Independent Movies, Sci-Fi...   \n",
       "4                                             Dramas   \n",
       "\n",
       "                                         Description  \n",
       "0  In a future where the elite inhabit an island ...  \n",
       "1  After a devastating earthquake hits Mexico Cit...  \n",
       "2  When an army recruit is found dead, his fellow...  \n",
       "3  In a postapocalyptic world, rag-doll robots hi...  \n",
       "4  A brilliant group of students become card-coun...  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "netflix_data = pd.read_csv('../input/netflix-data/Netflix Dataset.csv') # Creating a DataFrame\n",
    "netflix_data.head() #Showing the five first lines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "23f3abf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.135945Z",
     "iopub.status.busy": "2025-08-27T14:21:22.135616Z",
     "iopub.status.idle": "2025-08-27T14:21:22.172669Z",
     "shell.execute_reply": "2025-08-27T14:21:22.171583Z"
    },
    "papermill": {
     "duration": 0.045541,
     "end_time": "2025-08-27T14:21:22.174541",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.129000",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7789 entries, 0 to 7788\n",
      "Data columns (total 11 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   Show_Id       7789 non-null   object\n",
      " 1   Category      7789 non-null   object\n",
      " 2   Title         7789 non-null   object\n",
      " 3   Director      5401 non-null   object\n",
      " 4   Cast          7071 non-null   object\n",
      " 5   Country       7282 non-null   object\n",
      " 6   Release_Date  7779 non-null   object\n",
      " 7   Rating        7782 non-null   object\n",
      " 8   Duration      7789 non-null   object\n",
      " 9   Type          7789 non-null   object\n",
      " 10  Description   7789 non-null   object\n",
      "dtypes: object(11)\n",
      "memory usage: 669.5+ KB\n"
     ]
    }
   ],
   "source": [
    "netflix_data.info() # Showing all columns and Non-Null count cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "70ed5f33",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.188164Z",
     "iopub.status.busy": "2025-08-27T14:21:22.187844Z",
     "iopub.status.idle": "2025-08-27T14:21:22.246241Z",
     "shell.execute_reply": "2025-08-27T14:21:22.245153Z"
    },
    "papermill": {
     "duration": 0.067487,
     "end_time": "2025-08-27T14:21:22.248005",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.180518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Show_Id</th>\n",
       "      <th>Category</th>\n",
       "      <th>Title</th>\n",
       "      <th>Director</th>\n",
       "      <th>Cast</th>\n",
       "      <th>Country</th>\n",
       "      <th>Release_Date</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Type</th>\n",
       "      <th>Description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7789</td>\n",
       "      <td>7789</td>\n",
       "      <td>7789</td>\n",
       "      <td>5401</td>\n",
       "      <td>7071</td>\n",
       "      <td>7282</td>\n",
       "      <td>7779</td>\n",
       "      <td>7782</td>\n",
       "      <td>7789</td>\n",
       "      <td>7789</td>\n",
       "      <td>7789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7787</td>\n",
       "      <td>2</td>\n",
       "      <td>7787</td>\n",
       "      <td>4050</td>\n",
       "      <td>6831</td>\n",
       "      <td>681</td>\n",
       "      <td>1565</td>\n",
       "      <td>14</td>\n",
       "      <td>216</td>\n",
       "      <td>492</td>\n",
       "      <td>7769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>s6621</td>\n",
       "      <td>Movie</td>\n",
       "      <td>The Lost Okoroshi</td>\n",
       "      <td>Raúl Campos, Jan Suter</td>\n",
       "      <td>David Attenborough</td>\n",
       "      <td>United States</td>\n",
       "      <td>January 1, 2020</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>1 Season</td>\n",
       "      <td>Documentaries</td>\n",
       "      <td>Multiple women report their husbands as missin...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>2</td>\n",
       "      <td>5379</td>\n",
       "      <td>2</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>2556</td>\n",
       "      <td>118</td>\n",
       "      <td>2865</td>\n",
       "      <td>1608</td>\n",
       "      <td>334</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Show_Id Category              Title                Director  \\\n",
       "count     7789     7789               7789                    5401   \n",
       "unique    7787        2               7787                    4050   \n",
       "top      s6621    Movie  The Lost Okoroshi  Raúl Campos, Jan Suter   \n",
       "freq         2     5379                  2                      18   \n",
       "\n",
       "                      Cast        Country     Release_Date Rating  Duration  \\\n",
       "count                 7071           7282             7779   7782      7789   \n",
       "unique                6831            681             1565     14       216   \n",
       "top     David Attenborough  United States  January 1, 2020  TV-MA  1 Season   \n",
       "freq                    18           2556              118   2865      1608   \n",
       "\n",
       "                 Type                                        Description  \n",
       "count            7789                                               7789  \n",
       "unique            492                                               7769  \n",
       "top     Documentaries  Multiple women report their husbands as missin...  \n",
       "freq              334                                                  3  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "netflix_data.describe() # Showing statical information about the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6007082f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.264520Z",
     "iopub.status.busy": "2025-08-27T14:21:22.263183Z",
     "iopub.status.idle": "2025-08-27T14:21:22.271236Z",
     "shell.execute_reply": "2025-08-27T14:21:22.269976Z"
    },
    "papermill": {
     "duration": 0.017191,
     "end_time": "2025-08-27T14:21:22.272714",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.255523",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Rows: 7789\n",
      "Number of Columns: 11\n",
      "Total Size: 85679\n",
      "DataFrame Columns: ['Show_Id', 'Category', 'Title', 'Director', 'Cast', 'Country', 'Release_Date', 'Rating', 'Duration', 'Type', 'Description']\n",
      "DataFrame Shape: (7789, 11)\n"
     ]
    }
   ],
   "source": [
    "# Know more about the DataFrame\n",
    "print(f\"Number of Rows: {netflix_data.shape[0]}\") # Rows number\n",
    "print(f\"Number of Columns: {netflix_data.shape[1]}\") # Columns number\n",
    "print(f\"Total Size: {netflix_data.size}\") # (Total of Cells) DataFrame Size\n",
    "print(f\"DataFrame Columns: {netflix_data.columns.tolist()}\") # Showing the DataFrame Columns\n",
    "print(f\"DataFrame Shape: {netflix_data.shape}\") # Showing the DataFrame Size (Rows x Columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "487db61a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.286071Z",
     "iopub.status.busy": "2025-08-27T14:21:22.285728Z",
     "iopub.status.idle": "2025-08-27T14:21:22.291993Z",
     "shell.execute_reply": "2025-08-27T14:21:22.290896Z"
    },
    "papermill": {
     "duration": 0.014864,
     "end_time": "2025-08-27T14:21:22.293671",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.278807",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'May 11, 2018'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Selecting a specific value in a specific index\n",
    "netflix_data.Release_Date[7000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dc67f318",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.307295Z",
     "iopub.status.busy": "2025-08-27T14:21:22.306956Z",
     "iopub.status.idle": "2025-08-27T14:21:22.314165Z",
     "shell.execute_reply": "2025-08-27T14:21:22.313169Z"
    },
    "papermill": {
     "duration": 0.016125,
     "end_time": "2025-08-27T14:21:22.315983",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.299858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['TV Show', 'Movie'], dtype=object)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Showing unique values for Category Column\n",
    "netflix_data.Category.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a679092",
   "metadata": {
    "papermill": {
     "duration": 0.005681,
     "end_time": "2025-08-27T14:21:22.327842",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.322161",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Cleaning DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "60e9073c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.340998Z",
     "iopub.status.busy": "2025-08-27T14:21:22.340693Z",
     "iopub.status.idle": "2025-08-27T14:21:22.370292Z",
     "shell.execute_reply": "2025-08-27T14:21:22.369162Z"
    },
    "papermill": {
     "duration": 0.038133,
     "end_time": "2025-08-27T14:21:22.371918",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.333785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Show_Id</th>\n",
       "      <th>Category</th>\n",
       "      <th>Title</th>\n",
       "      <th>Director</th>\n",
       "      <th>Cast</th>\n",
       "      <th>Country</th>\n",
       "      <th>Release_Date</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Type</th>\n",
       "      <th>Description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6300</th>\n",
       "      <td>s684</td>\n",
       "      <td>Movie</td>\n",
       "      <td>Backfire</td>\n",
       "      <td>Dave Patten</td>\n",
       "      <td>Black Deniro, Byron \"Squally\" Vinson, Dominic ...</td>\n",
       "      <td>United States</td>\n",
       "      <td>April 5, 2019</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>97 min</td>\n",
       "      <td>Dramas, Independent Movies, Thrillers</td>\n",
       "      <td>When two would-be robbers accidentally kill a ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6622</th>\n",
       "      <td>s6621</td>\n",
       "      <td>Movie</td>\n",
       "      <td>The Lost Okoroshi</td>\n",
       "      <td>Abba T. Makama</td>\n",
       "      <td>Seun Ajayi, Judith Audu, Tope Tedela, Ifu Enna...</td>\n",
       "      <td>Nigeria</td>\n",
       "      <td>September 4, 2020</td>\n",
       "      <td>TV-MA</td>\n",
       "      <td>94 min</td>\n",
       "      <td>Comedies, Dramas, Independent Movies</td>\n",
       "      <td>A disillusioned security guard transforms into...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Show_Id Category              Title        Director  \\\n",
       "6300    s684    Movie           Backfire     Dave Patten   \n",
       "6622   s6621    Movie  The Lost Okoroshi  Abba T. Makama   \n",
       "\n",
       "                                                   Cast        Country  \\\n",
       "6300  Black Deniro, Byron \"Squally\" Vinson, Dominic ...  United States   \n",
       "6622  Seun Ajayi, Judith Audu, Tope Tedela, Ifu Enna...        Nigeria   \n",
       "\n",
       "           Release_Date Rating Duration  \\\n",
       "6300      April 5, 2019  TV-MA   97 min   \n",
       "6622  September 4, 2020  TV-MA   94 min   \n",
       "\n",
       "                                       Type  \\\n",
       "6300  Dramas, Independent Movies, Thrillers   \n",
       "6622   Comedies, Dramas, Independent Movies   \n",
       "\n",
       "                                            Description  \n",
       "6300  When two would-be robbers accidentally kill a ...  \n",
       "6622  A disillusioned security guard transforms into...  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Searching duplicated records in the DataFrame\n",
    "netflix_data[netflix_data.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f20f3a4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.387881Z",
     "iopub.status.busy": "2025-08-27T14:21:22.387575Z",
     "iopub.status.idle": "2025-08-27T14:21:22.409737Z",
     "shell.execute_reply": "2025-08-27T14:21:22.408504Z"
    },
    "papermill": {
     "duration": 0.034284,
     "end_time": "2025-08-27T14:21:22.412520",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.378236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame Shape after removing duplicated values: (7787, 11)\n"
     ]
    }
   ],
   "source": [
    "# Removing duplicated values\n",
    "netflix_data.drop_duplicates(inplace = True)\n",
    "print(f\"DataFrame Shape after removing duplicated values: {netflix_data.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2d80d6dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.426749Z",
     "iopub.status.busy": "2025-08-27T14:21:22.426425Z",
     "iopub.status.idle": "2025-08-27T14:21:22.440181Z",
     "shell.execute_reply": "2025-08-27T14:21:22.439145Z"
    },
    "papermill": {
     "duration": 0.022618,
     "end_time": "2025-08-27T14:21:22.441755",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.419137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Show_Id            0\n",
       "Category           0\n",
       "Title              0\n",
       "Director        2388\n",
       "Cast             718\n",
       "Country          507\n",
       "Release_Date      10\n",
       "Rating             7\n",
       "Duration           0\n",
       "Type               0\n",
       "Description        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Verifying NaN values sum for each column\n",
    "netflix_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "df06441b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.456985Z",
     "iopub.status.busy": "2025-08-27T14:21:22.456090Z",
     "iopub.status.idle": "2025-08-27T14:21:22.467827Z",
     "shell.execute_reply": "2025-08-27T14:21:22.466793Z"
    },
    "papermill": {
     "duration": 0.020653,
     "end_time": "2025-08-27T14:21:22.469404",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.448751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame Shape after Replacing NaN values: (7787, 11)\n"
     ]
    }
   ],
   "source": [
    "# Replacing NaN values to 'Unknown'\n",
    "netflix_data['Director'] = netflix_data['Director'].fillna('Unknown')\n",
    "netflix_data['Cast'] = netflix_data['Cast'].fillna('Unknown')\n",
    "netflix_data['Country'] = netflix_data['Country'].fillna('Unknown')\n",
    "print(f\"DataFrame Shape after Replacing NaN values: {netflix_data.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "66639fef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.484725Z",
     "iopub.status.busy": "2025-08-27T14:21:22.483444Z",
     "iopub.status.idle": "2025-08-27T14:21:22.498063Z",
     "shell.execute_reply": "2025-08-27T14:21:22.496956Z"
    },
    "papermill": {
     "duration": 0.023961,
     "end_time": "2025-08-27T14:21:22.499845",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.475884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame Shape after Removing NaN values: (7770, 11)\n"
     ]
    }
   ],
   "source": [
    "# Removing NaN values\n",
    "netflix_data.dropna(subset='Rating', inplace = True)\n",
    "netflix_data.dropna(subset='Release_Date', inplace = True)\n",
    "print(f\"DataFrame Shape after Removing NaN values: {netflix_data.shape}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "573b81d7",
   "metadata": {
    "papermill": {
     "duration": 0.006098,
     "end_time": "2025-08-27T14:21:22.512477",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.506379",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Matplotlib Library\n",
    "\n",
    "**Matplotlib**, short for *Mathematical Plotting Library*, is a powerful and flexible library for data visualization in Python. It provides a wide array of tools to create static, animated, and interactive visualizations, making it essential for exploring patterns and trends in datasets.\n",
    "\n",
    "Matplotlib is widely used in data science, machine learning, and scientific computing to create high-quality plots, charts, and graphs. It serves as the foundation for other advanced visualization libraries like Seaborn and Plotly\n",
    "\n",
    "---\n",
    "\n",
    "## Import Matplotlib Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "994eddd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.526936Z",
     "iopub.status.busy": "2025-08-27T14:21:22.526213Z",
     "iopub.status.idle": "2025-08-27T14:21:22.530497Z",
     "shell.execute_reply": "2025-08-27T14:21:22.529676Z"
    },
    "papermill": {
     "duration": 0.012959,
     "end_time": "2025-08-27T14:21:22.531919",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.518960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1773a96c",
   "metadata": {
    "papermill": {
     "duration": 0.006137,
     "end_time": "2025-08-27T14:21:22.544406",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.538269",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Matplotlib Features\n",
    "\n",
    "1. **Line Plots**\n",
    "\n",
    "    *Matplotlib's Line Plots* allow users to visualize relationships between two variables over a continuous range. They're ideal for showing trends, changes over time, or data patterns.\n",
    "   \n",
    "2. **Bar Charts**\n",
    "\n",
    "    *Bar Charts* help visualize categorical data with rectangular bars representing values. They're ideal for comparing different groups or tracking frequency.\n",
    "\n",
    "3. **Histograms**\n",
    "\n",
    "    *Histograms* are used for visualizing the distribution of a dataset. They divide data into bins and display the frequency of values in each range.\n",
    "\n",
    "4. **Pie Charts** \n",
    "\n",
    "    *Pie Charts* visually depict proportions within a dataset as slices of a circular pie. They're ideal for simple comparisons of categorical data.\n",
    "\n",
    "5. **Scatter Plots**\n",
    "\n",
    "   *Pandas Aggregation and Grouping* represent relationships between two numeric variables using points. They're ideal for identifying correlations, clusters, and outliers.\n",
    "\n",
    "---\n",
    "\n",
    "## Exploring Matplotlib Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8eab788d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.558236Z",
     "iopub.status.busy": "2025-08-27T14:21:22.557932Z",
     "iopub.status.idle": "2025-08-27T14:21:22.890364Z",
     "shell.execute_reply": "2025-08-27T14:21:22.889354Z"
    },
    "papermill": {
     "duration": 0.341445,
     "end_time": "2025-08-27T14:21:22.892106",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.550661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a Histogram to show the distribution of Category Column\n",
    "plt.hist(netflix_data['Category'], bins=3)\n",
    "plt.title(\"Category Histogram\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "292abd47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:22.908329Z",
     "iopub.status.busy": "2025-08-27T14:21:22.907999Z",
     "iopub.status.idle": "2025-08-27T14:21:23.057825Z",
     "shell.execute_reply": "2025-08-27T14:21:23.056905Z"
    },
    "papermill": {
     "duration": 0.159724,
     "end_time": "2025-08-27T14:21:23.059803",
     "exception": false,
     "start_time": "2025-08-27T14:21:22.900079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating a Pie Chart to show the distribution of 5 highest values in the Type Column\n",
    "type_counts = netflix_data['Type'].value_counts().nlargest(5)\n",
    "labels = type_counts.index # type description\n",
    "values = type_counts.values\n",
    "plt.pie(values, labels=labels, autopct='%1.1f%%')\n",
    "plt.title(\"Type Pie Chart\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8053d45e",
   "metadata": {
    "papermill": {
     "duration": 0.007574,
     "end_time": "2025-08-27T14:21:23.076123",
     "exception": false,
     "start_time": "2025-08-27T14:21:23.068549",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Seaborn Library\n",
    "\n",
    "**Seaborn**, built on top of *Matplotlib*, is a powerful Python library for data visualization. It simplifies the creation of aesthetically pleasing and informative plots by providing high-level interfaces for statistical graphics.\n",
    "\n",
    "It was designed to make statistical visualization more intuitive, serving as an essential tool for exploring relationships in datasets and discovering patterns. Seaborn works seamlessly with Pandas DataFrames, making it a favorite in the fields of data science and machine learning.\n",
    "\n",
    "---\n",
    "\n",
    "## Import Seaborn Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "49263609",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:23.093095Z",
     "iopub.status.busy": "2025-08-27T14:21:23.092619Z",
     "iopub.status.idle": "2025-08-27T14:21:25.070915Z",
     "shell.execute_reply": "2025-08-27T14:21:25.069795Z"
    },
    "papermill": {
     "duration": 1.989092,
     "end_time": "2025-08-27T14:21:25.072671",
     "exception": false,
     "start_time": "2025-08-27T14:21:23.083579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a26896d0",
   "metadata": {
    "papermill": {
     "duration": 0.008236,
     "end_time": "2025-08-27T14:21:25.089170",
     "exception": false,
     "start_time": "2025-08-27T14:21:25.080934",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Seaborn Features\n",
    "\n",
    "1. **Relationship Exploration**\n",
    "\n",
    "    *Seaborn's Relationship Exploration tools* allow you to visualize changes or correlations between two variables using scatterplots (for raw points) and line plots (for trends). These tools make relationship analysis simple and effective.\n",
    "   \n",
    "2. **Distribution Visualization**\n",
    "\n",
    "    *Seaborn's Distribution Visualization tools* display the shape, spread, and range of your data, helping you understand its overall structure. Common options include histograms, KDE plots, and boxplots.\n",
    "\n",
    "3. **Categorical Data **\n",
    "\n",
    "    *Seaborn's Categorical Data tools* enable analysis of datasets organized by categories. Bar plots, count plots, and violin plots can uncover differences across groups or highlight trends.\n",
    "\n",
    "4. **Heatmaps** \n",
    "\n",
    "    *Seaborn's Heatmaps* provide a visual representation of data matrices, allowing users to explore relationships and trends across numerical values effectively.\n",
    "\n",
    "5. **Pairwise Relationships**\n",
    "\n",
    "   *Pairwise Relationships tools* enable developers to carry out calculations like addition, multiplication, and more directly on arrays without needing loops. This approach is fast, efficient, and simplifies handling large datasets in Python.\n",
    "\n",
    "---\n",
    "\n",
    "## Exploring Seaborn Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "93158cc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:21:25.107112Z",
     "iopub.status.busy": "2025-08-27T14:21:25.106643Z",
     "iopub.status.idle": "2025-08-27T14:21:25.424117Z",
     "shell.execute_reply": "2025-08-27T14:21:25.423162Z"
    },
    "papermill": {
     "duration": 0.329016,
     "end_time": "2025-08-27T14:21:25.425850",
     "exception": false,
     "start_time": "2025-08-27T14:21:25.096834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a Distribution of Movies vs TV Shows by Top 5 Countries\n",
    "netflix_data['Country_Split'] = netflix_data['Country'].str.split(',').str[0].str.strip()\n",
    "content_data = netflix_data.pivot_table(index='Country_Split', columns='Category', aggfunc='size', fill_value=0).reset_index() # Create pivot table with counts for Movies and TV Shows by Country\n",
    "content_data['Total'] = content_data['Movie'] + content_data['TV Show'] # Add a Total column for sorting purposes\n",
    "top_5_countries = content_data.nlargest(5, 'Total').drop(columns=['Total']) # Select the top 5 countries based on the total number of titles\n",
    "\n",
    "# Melt the pivot table for Seaborn compatibility\n",
    "content_data_melted = top_5_countries.melt(id_vars='Country_Split', var_name='Category', value_name='Count')\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(data=content_data_melted, x='Country_Split', y='Count', hue='Category', palette=['skyblue', 'salmon']) # Create the barplot\n",
    "\n",
    "# Customize the plot\n",
    "plt.title(\"Movies vs TV Shows Distribution by Top 5 Countries\")\n",
    "plt.xlabel(\"Country\")\n",
    "plt.ylabel(\"Number of Titles\")\n",
    "plt.xticks(rotation=45, ha=\"right\")  # Rotate x-axis labels for better readability\n",
    "plt.legend(title=\"Category\")\n",
    "plt.tight_layout()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a800cfe",
   "metadata": {
    "papermill": {
     "duration": 0.008,
     "end_time": "2025-08-27T14:21:25.442467",
     "exception": false,
     "start_time": "2025-08-27T14:21:25.434467",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Content created based on *Python for Data Analytics - Full Course for Beginners* by **Luke Barousse**"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8144567,
     "sourceId": 12874859,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12.399122,
   "end_time": "2025-08-27T14:21:26.171569",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-27T14:21:13.772447",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
